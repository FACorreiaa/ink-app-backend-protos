syntax = "proto3";

package inkMe.customer;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/FACorreiaa/ink-app-backend-protos/modules/customer/generated";

service CustomerService {
  rpc CreateCustomer(CreateCustomerRequest) returns (CreateCustomerResponse);
  rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse);
  rpc ListCustomers(ListCustomersRequest) returns (ListCustomersResponse);
  rpc UpdateCustomer(UpdateCustomerRequest) returns (UpdateCustomerResponse);

  rpc DeleteCustomer(DeleteCustomerRequest) returns (DeleteCustomerResponse); // Add delete functionality
  rpc ArchiveCustomer(ArchiveCustomerRequest) returns (ArchiveCustomerResponse); // Soft delete or archive inactive Customers
  rpc GetCustomerHistory(GetCustomerHistoryRequest) returns (GetCustomerHistoryResponse); // Retrieve Customer interaction history (e.g., appointments, messages)
  rpc AddCustomerNote(AddCustomerNoteRequest) returns (AddCustomerNoteResponse); // Add private notes about a Customer (e.g., preferences, allergies)
  rpc SearchCustomers(SearchCustomersRequest) returns (SearchCustomersResponse); // Search Customers by name, phone, or other criteria
}

service CustomerAuth {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(NilReq) returns (NilRes);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc ChangeEmail(ChangeEmailRequest) returns (ChangeEmailResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (TokenResponse);

  // New user-related services
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
}


message CreateCustomerRequest {
  Customer customer = 1;
  google.protobuf.Timestamp created_at = 2;
  BaseRequest request = 100;
}

message CreateCustomerResponse {
  string customer_id = 1;
  string message   = 2;
  BaseResponse response = 100;
}

message GetCustomerRequest {
  string customer_id = 1;
  BaseRequest request = 100;
}

message GetCustomerResponse {
  Customer customer = 1;
  BaseResponse response = 100;
}

message ListCustomersRequest {
  string studio_id = 1;
  // optionally filter by customer_id
  BaseRequest request = 100;
}

message ListCustomersResponse {
  repeated Customer customers = 1;
  BaseResponse response = 100;
}

message UpdateCustomerRequest {
  string customer_id = 1;
  Customer customer = 2;
  google.protobuf.FieldMask update_mask = 3;
  google.protobuf.Timestamp updated_at = 4;
  BaseRequest request = 100;
}

message UpdateCustomerResponse {
  bool success = 1;
  string message = 2;
  Customer customer = 3;
  BaseResponse response = 100;
}

message Customer {
  string id         = 1;
  string studio_id  = 2;
  string full_name  = 3;
  string email      = 4;
  string phone      = 5;
  string notes      = 6;
  string nif       = 7;
  string address    = 8;
  string city       = 9;
  string postal_code = 10;
  string country    = 11;
  string id_card_number    = 12;
  string first_name = 13;
  string last_name  = 14;
  string birthday   = 15;
  bool is_archived = 16;
}

message BaseRequest {
  string downstream = 998;
  string request_id = 999;
}

message BaseResponse {
  string upstream = 998;
  string request_id = 999;
  string status = 1000;
}

message XDiff {
  string field      = 1;
  string old_value  = 2;
  string new_value  = 3;
}

message DeleteCustomerRequest {
  string id = 1;
  BaseRequest request = 100;
}

message DeleteCustomerResponse {
  bool success = 1;
  string message = 2;
  BaseResponse response = 100;
}

message ArchiveCustomerRequest {
  string id = 1;
  BaseRequest request = 100;
}

message ArchiveCustomerResponse {
  string message = 1;
  BaseResponse response = 100;
}

message GetCustomerHistoryRequest {
  string customer_id = 1;
  BaseRequest request = 100;
}

message GetCustomerHistoryResponse {
  repeated Interaction interactions = 1;
  BaseResponse response = 100;
}

message Interaction {
  string id         = 1;
  string customer_id  = 2;
  string artist_id  = 3;
  string appointment_id = 4;
  string message    = 5;
  string created_at = 6;
}

message AddCustomerNoteRequest {
  string customer_id = 1;
  string note      = 2;
  BaseRequest request = 100;
}

message AddCustomerNoteResponse {
  string message = 1;
  BaseResponse response = 100;
}

message SearchCustomersRequest {
  string query = 1;
  BaseRequest request = 100;
}

message SearchCustomersResponse {
  repeated Customer customers = 1;
  BaseResponse response = 100;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;
  FAILURE = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
  string email = 3;
  BaseRequest request = 100;
}

message LoginResponse {
  string token = 1;
  string message = 2;
  BaseResponse response = 100;
}

message NilReq {

}

message NilRes {

}

message ChangePasswordRequest {
  string username = 1;
  string old_password = 2;
  string new_password = 3;
  BaseRequest request = 100;
}

message ChangePasswordResponse {
  string message = 1;
  BaseResponse response = 100;
}

message ChangeEmailRequest {
  string username = 1;
  string password = 2;
  string new_email = 3;
  BaseRequest request = 100;
}

message ChangeEmailResponse {
  string message = 1;
  BaseResponse response = 100;
}

message User {
  string id = 1;
  string email = 2;
  string username = 3;
  string password_hash = 4;
  bool is_admin = 5;
  string created_at = 6;
  string updated_at = 7;
  enum Role {
    ROLE_UNSPECIFIED = 0;
    ADMIN = 1;
    STAFF = 2;
    USER = 3;
    MODERATOR = 4;
  }

  Role role = 8;
  string studio_id = 9;
}

message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string studio_id = 4;
  string role = 5;
  google.protobuf.Timestamp created_at = 6;
  BaseRequest request = 100;
}

message RegisterResponse {
  string message = 1;
  BaseResponse response = 100;
}

message UpdateUserRequest {
  User user = 1;
  BaseRequest request = 100;
}

message UpdateUserResponse {
  string message = 1;
  BaseResponse response = 100;
}


message RefreshTokenRequest {
  string refresh_token = 1;
  BaseRequest request = 100;
}

message TokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  BaseResponse response = 100;
}