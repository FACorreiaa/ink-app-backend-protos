syntax = "proto3";

package inkMe.auth;

service Auth {
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(NilReq) returns (NilRes);
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc ChangeEmail(ChangeEmailRequest) returns (ChangeEmailResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (TokenResponse);

  // New user-related services
  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse);
  rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc InsertUser(InsertUserRequest) returns (InsertUserResponse);
}

message RegisterRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message RegisterResponse {
  string message = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
  string email = 3;
}

message LoginResponse {
  string token = 1;
  string message = 2;
}

message NilReq {

}

message NilRes {

}

message ChangePasswordRequest {
  string username = 1;
  string old_password = 2;
  string new_password = 3;
}

message ChangePasswordResponse {
  string message = 1;
}

message ChangeEmailRequest {
  string username = 1;
  string password = 2;
  string new_email = 3;
}

message ChangeEmailResponse {
  string message = 1;
}

message User {
  string id = 1;
  string email = 2;
  string username = 3;
  string password_hash = 4;
  bool is_admin = 5;
  string created_at = 6;
  string updated_at = 7;
  enum Role {
    ROLE_UNSPECIFIED = 0;
    ADMIN = 1;
    STAFF = 2;
    USER = 3;
    MODERATOR = 4;
  }

  Role role = 8;
  string studio_id = 9;
}

// Request and response messages for new user-related services
message GetAllUsersRequest {

}

message GetAllUsersResponse {
  repeated User users = 1;
}

message GetUserByIDRequest {
  string id = 1;
}

message GetUserByIDResponse {
  User user = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {
  string message = 1;
}

message UpdateUserRequest {
  User user = 1;
}

message UpdateUserResponse {
  string message = 1;
}

message InsertUserRequest {
  User user = 1;
}

message InsertUserResponse {
  string message = 1;
}

message RefreshTokenRequest {
  string refresh_token = 1;
  BaseRequest request = 100;
}

message TokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  BaseResponse response = 100;
}

message BaseRequest {
  string downstream = 998;
  string request_id = 999;
}

message BaseResponse {
  string upstream = 998;
  string request_id = 999;
  string status = 1000;
}

