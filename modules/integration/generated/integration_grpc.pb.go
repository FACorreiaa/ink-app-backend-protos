// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: integration.proto

package integration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegrationService_LinkProvider_FullMethodName    = "/inkMe.integration.IntegrationService/LinkProvider"
	IntegrationService_RefreshProvider_FullMethodName = "/inkMe.integration.IntegrationService/RefreshProvider"
	IntegrationService_GetProviderInfo_FullMethodName = "/inkMe.integration.IntegrationService/GetProviderInfo"
	IntegrationService_UnlinkProvider_FullMethodName  = "/inkMe.integration.IntegrationService/UnlinkProvider"
	IntegrationService_ListProviders_FullMethodName   = "/inkMe.integration.IntegrationService/ListProviders"
)

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Integration service for managing connections with external providers
type IntegrationServiceClient interface {
	// Link an external provider to a studio
	LinkProvider(ctx context.Context, in *LinkProviderRequest, opts ...grpc.CallOption) (*LinkProviderResponse, error)
	// Refresh the authentication tokens for a provider
	RefreshProvider(ctx context.Context, in *RefreshProviderRequest, opts ...grpc.CallOption) (*RefreshProviderResponse, error)
	// Get information about a linked provider
	GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error)
	// Unlink a provider from a studio
	UnlinkProvider(ctx context.Context, in *UnlinkProviderRequest, opts ...grpc.CallOption) (*UnlinkProviderResponse, error)
	// List all linked providers for a studio
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) LinkProvider(ctx context.Context, in *LinkProviderRequest, opts ...grpc.CallOption) (*LinkProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkProviderResponse)
	err := c.cc.Invoke(ctx, IntegrationService_LinkProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) RefreshProvider(ctx context.Context, in *RefreshProviderRequest, opts ...grpc.CallOption) (*RefreshProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshProviderResponse)
	err := c.cc.Invoke(ctx, IntegrationService_RefreshProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetProviderInfo(ctx context.Context, in *GetProviderInfoRequest, opts ...grpc.CallOption) (*GetProviderInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderInfoResponse)
	err := c.cc.Invoke(ctx, IntegrationService_GetProviderInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UnlinkProvider(ctx context.Context, in *UnlinkProviderRequest, opts ...grpc.CallOption) (*UnlinkProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlinkProviderResponse)
	err := c.cc.Invoke(ctx, IntegrationService_UnlinkProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, IntegrationService_ListProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility.
//
// Integration service for managing connections with external providers
type IntegrationServiceServer interface {
	// Link an external provider to a studio
	LinkProvider(context.Context, *LinkProviderRequest) (*LinkProviderResponse, error)
	// Refresh the authentication tokens for a provider
	RefreshProvider(context.Context, *RefreshProviderRequest) (*RefreshProviderResponse, error)
	// Get information about a linked provider
	GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error)
	// Unlink a provider from a studio
	UnlinkProvider(context.Context, *UnlinkProviderRequest) (*UnlinkProviderResponse, error)
	// List all linked providers for a studio
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrationServiceServer struct{}

func (UnimplementedIntegrationServiceServer) LinkProvider(context.Context, *LinkProviderRequest) (*LinkProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkProvider not implemented")
}
func (UnimplementedIntegrationServiceServer) RefreshProvider(context.Context, *RefreshProviderRequest) (*RefreshProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshProvider not implemented")
}
func (UnimplementedIntegrationServiceServer) GetProviderInfo(context.Context, *GetProviderInfoRequest) (*GetProviderInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderInfo not implemented")
}
func (UnimplementedIntegrationServiceServer) UnlinkProvider(context.Context, *UnlinkProviderRequest) (*UnlinkProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkProvider not implemented")
}
func (UnimplementedIntegrationServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}
func (UnimplementedIntegrationServiceServer) testEmbeddedByValue()                            {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntegrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_LinkProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).LinkProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_LinkProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).LinkProvider(ctx, req.(*LinkProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_RefreshProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).RefreshProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_RefreshProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).RefreshProvider(ctx, req.(*RefreshProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetProviderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetProviderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_GetProviderInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetProviderInfo(ctx, req.(*GetProviderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UnlinkProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UnlinkProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_UnlinkProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UnlinkProvider(ctx, req.(*UnlinkProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrationService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inkMe.integration.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LinkProvider",
			Handler:    _IntegrationService_LinkProvider_Handler,
		},
		{
			MethodName: "RefreshProvider",
			Handler:    _IntegrationService_RefreshProvider_Handler,
		},
		{
			MethodName: "GetProviderInfo",
			Handler:    _IntegrationService_GetProviderInfo_Handler,
		},
		{
			MethodName: "UnlinkProvider",
			Handler:    _IntegrationService_UnlinkProvider_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _IntegrationService_ListProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration.proto",
}
