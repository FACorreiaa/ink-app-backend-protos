// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: studio.proto

package studio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudioService_CreateStudio_FullMethodName        = "/inkMe.studio.StudioService/CreateStudio"
	StudioService_UpdateStudio_FullMethodName        = "/inkMe.studio.StudioService/UpdateStudio"
	StudioService_GetStudio_FullMethodName           = "/inkMe.studio.StudioService/GetStudio"
	StudioService_AddStaffMember_FullMethodName      = "/inkMe.studio.StudioService/AddStaffMember"
	StudioService_UpdateStaffMember_FullMethodName   = "/inkMe.studio.StudioService/UpdateStaffMember"
	StudioService_RemoveStaffMember_FullMethodName   = "/inkMe.studio.StudioService/RemoveStaffMember"
	StudioService_ListStaffMembers_FullMethodName    = "/inkMe.studio.StudioService/ListStaffMembers"
	StudioService_SetStaffPermissions_FullMethodName = "/inkMe.studio.StudioService/SetStaffPermissions"
	StudioService_GetStaffPermissions_FullMethodName = "/inkMe.studio.StudioService/GetStaffPermissions"
)

// StudioServiceClient is the client API for StudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StudioService for managing tattoo studios and staff
type StudioServiceClient interface {
	CreateStudio(ctx context.Context, in *CreateStudioRequest, opts ...grpc.CallOption) (*CreateStudioResponse, error)
	UpdateStudio(ctx context.Context, in *UpdateStudioRequest, opts ...grpc.CallOption) (*UpdateStudioResponse, error)
	GetStudio(ctx context.Context, in *GetStudioRequest, opts ...grpc.CallOption) (*GetStudioResponse, error)
	// Staff management
	AddStaffMember(ctx context.Context, in *AddStaffMemberRequest, opts ...grpc.CallOption) (*AddStaffMemberResponse, error)
	UpdateStaffMember(ctx context.Context, in *UpdateStaffMemberRequest, opts ...grpc.CallOption) (*UpdateStaffMemberResponse, error)
	RemoveStaffMember(ctx context.Context, in *RemoveStaffMemberRequest, opts ...grpc.CallOption) (*RemoveStaffMemberResponse, error)
	ListStaffMembers(ctx context.Context, in *ListStaffMembersRequest, opts ...grpc.CallOption) (*ListStaffMembersResponse, error)
	// Permissions and roles
	SetStaffPermissions(ctx context.Context, in *SetStaffPermissionsRequest, opts ...grpc.CallOption) (*SetStaffPermissionsResponse, error)
	GetStaffPermissions(ctx context.Context, in *GetStaffPermissionsRequest, opts ...grpc.CallOption) (*GetStaffPermissionsResponse, error)
}

type studioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudioServiceClient(cc grpc.ClientConnInterface) StudioServiceClient {
	return &studioServiceClient{cc}
}

func (c *studioServiceClient) CreateStudio(ctx context.Context, in *CreateStudioRequest, opts ...grpc.CallOption) (*CreateStudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudioResponse)
	err := c.cc.Invoke(ctx, StudioService_CreateStudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) UpdateStudio(ctx context.Context, in *UpdateStudioRequest, opts ...grpc.CallOption) (*UpdateStudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudioResponse)
	err := c.cc.Invoke(ctx, StudioService_UpdateStudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) GetStudio(ctx context.Context, in *GetStudioRequest, opts ...grpc.CallOption) (*GetStudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudioResponse)
	err := c.cc.Invoke(ctx, StudioService_GetStudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) AddStaffMember(ctx context.Context, in *AddStaffMemberRequest, opts ...grpc.CallOption) (*AddStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_AddStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) UpdateStaffMember(ctx context.Context, in *UpdateStaffMemberRequest, opts ...grpc.CallOption) (*UpdateStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_UpdateStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) RemoveStaffMember(ctx context.Context, in *RemoveStaffMemberRequest, opts ...grpc.CallOption) (*RemoveStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_RemoveStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) ListStaffMembers(ctx context.Context, in *ListStaffMembersRequest, opts ...grpc.CallOption) (*ListStaffMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffMembersResponse)
	err := c.cc.Invoke(ctx, StudioService_ListStaffMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) SetStaffPermissions(ctx context.Context, in *SetStaffPermissionsRequest, opts ...grpc.CallOption) (*SetStaffPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStaffPermissionsResponse)
	err := c.cc.Invoke(ctx, StudioService_SetStaffPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) GetStaffPermissions(ctx context.Context, in *GetStaffPermissionsRequest, opts ...grpc.CallOption) (*GetStaffPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffPermissionsResponse)
	err := c.cc.Invoke(ctx, StudioService_GetStaffPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudioServiceServer is the server API for StudioService service.
// All implementations must embed UnimplementedStudioServiceServer
// for forward compatibility.
//
// StudioService for managing tattoo studios and staff
type StudioServiceServer interface {
	CreateStudio(context.Context, *CreateStudioRequest) (*CreateStudioResponse, error)
	UpdateStudio(context.Context, *UpdateStudioRequest) (*UpdateStudioResponse, error)
	GetStudio(context.Context, *GetStudioRequest) (*GetStudioResponse, error)
	// Staff management
	AddStaffMember(context.Context, *AddStaffMemberRequest) (*AddStaffMemberResponse, error)
	UpdateStaffMember(context.Context, *UpdateStaffMemberRequest) (*UpdateStaffMemberResponse, error)
	RemoveStaffMember(context.Context, *RemoveStaffMemberRequest) (*RemoveStaffMemberResponse, error)
	ListStaffMembers(context.Context, *ListStaffMembersRequest) (*ListStaffMembersResponse, error)
	// Permissions and roles
	SetStaffPermissions(context.Context, *SetStaffPermissionsRequest) (*SetStaffPermissionsResponse, error)
	GetStaffPermissions(context.Context, *GetStaffPermissionsRequest) (*GetStaffPermissionsResponse, error)
	mustEmbedUnimplementedStudioServiceServer()
}

// UnimplementedStudioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudioServiceServer struct{}

func (UnimplementedStudioServiceServer) CreateStudio(context.Context, *CreateStudioRequest) (*CreateStudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudio not implemented")
}
func (UnimplementedStudioServiceServer) UpdateStudio(context.Context, *UpdateStudioRequest) (*UpdateStudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudio not implemented")
}
func (UnimplementedStudioServiceServer) GetStudio(context.Context, *GetStudioRequest) (*GetStudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudio not implemented")
}
func (UnimplementedStudioServiceServer) AddStaffMember(context.Context, *AddStaffMemberRequest) (*AddStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) UpdateStaffMember(context.Context, *UpdateStaffMemberRequest) (*UpdateStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) RemoveStaffMember(context.Context, *RemoveStaffMemberRequest) (*RemoveStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) ListStaffMembers(context.Context, *ListStaffMembersRequest) (*ListStaffMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffMembers not implemented")
}
func (UnimplementedStudioServiceServer) SetStaffPermissions(context.Context, *SetStaffPermissionsRequest) (*SetStaffPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStaffPermissions not implemented")
}
func (UnimplementedStudioServiceServer) GetStaffPermissions(context.Context, *GetStaffPermissionsRequest) (*GetStaffPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffPermissions not implemented")
}
func (UnimplementedStudioServiceServer) mustEmbedUnimplementedStudioServiceServer() {}
func (UnimplementedStudioServiceServer) testEmbeddedByValue()                       {}

// UnsafeStudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudioServiceServer will
// result in compilation errors.
type UnsafeStudioServiceServer interface {
	mustEmbedUnimplementedStudioServiceServer()
}

func RegisterStudioServiceServer(s grpc.ServiceRegistrar, srv StudioServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudioService_ServiceDesc, srv)
}

func _StudioService_CreateStudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).CreateStudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_CreateStudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).CreateStudio(ctx, req.(*CreateStudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_UpdateStudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).UpdateStudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_UpdateStudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).UpdateStudio(ctx, req.(*UpdateStudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_GetStudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).GetStudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_GetStudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).GetStudio(ctx, req.(*GetStudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_AddStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).AddStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_AddStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).AddStaffMember(ctx, req.(*AddStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_UpdateStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).UpdateStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_UpdateStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).UpdateStaffMember(ctx, req.(*UpdateStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_RemoveStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).RemoveStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_RemoveStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).RemoveStaffMember(ctx, req.(*RemoveStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_ListStaffMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).ListStaffMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_ListStaffMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).ListStaffMembers(ctx, req.(*ListStaffMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_SetStaffPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStaffPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).SetStaffPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_SetStaffPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).SetStaffPermissions(ctx, req.(*SetStaffPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_GetStaffPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).GetStaffPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_GetStaffPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).GetStaffPermissions(ctx, req.(*GetStaffPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudioService_ServiceDesc is the grpc.ServiceDesc for StudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inkMe.studio.StudioService",
	HandlerType: (*StudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudio",
			Handler:    _StudioService_CreateStudio_Handler,
		},
		{
			MethodName: "UpdateStudio",
			Handler:    _StudioService_UpdateStudio_Handler,
		},
		{
			MethodName: "GetStudio",
			Handler:    _StudioService_GetStudio_Handler,
		},
		{
			MethodName: "AddStaffMember",
			Handler:    _StudioService_AddStaffMember_Handler,
		},
		{
			MethodName: "UpdateStaffMember",
			Handler:    _StudioService_UpdateStaffMember_Handler,
		},
		{
			MethodName: "RemoveStaffMember",
			Handler:    _StudioService_RemoveStaffMember_Handler,
		},
		{
			MethodName: "ListStaffMembers",
			Handler:    _StudioService_ListStaffMembers_Handler,
		},
		{
			MethodName: "SetStaffPermissions",
			Handler:    _StudioService_SetStaffPermissions_Handler,
		},
		{
			MethodName: "GetStaffPermissions",
			Handler:    _StudioService_GetStaffPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studio.proto",
}
