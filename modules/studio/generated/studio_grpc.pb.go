// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: studio.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudioService_CreateStudio_FullMethodName        = "/inkMe.studio.StudioService/CreateStudio"
	StudioService_UpdateStudio_FullMethodName        = "/inkMe.studio.StudioService/UpdateStudio"
	StudioService_AddStudioUser_FullMethodName       = "/inkMe.studio.StudioService/AddStudioUser"
	StudioService_UpdateStudioUser_FullMethodName    = "/inkMe.studio.StudioService/UpdateStudioUser"
	StudioService_RemoveStudioUser_FullMethodName    = "/inkMe.studio.StudioService/RemoveStudioUser"
	StudioService_ListStudios_FullMethodName         = "/inkMe.studio.StudioService/ListStudios"
	StudioService_AddStaffMember_FullMethodName      = "/inkMe.studio.StudioService/AddStaffMember"
	StudioService_UpdateStaffMember_FullMethodName   = "/inkMe.studio.StudioService/UpdateStaffMember"
	StudioService_RemoveStaffMember_FullMethodName   = "/inkMe.studio.StudioService/RemoveStaffMember"
	StudioService_ListStaffMembers_FullMethodName    = "/inkMe.studio.StudioService/ListStaffMembers"
	StudioService_SetStaffPermissions_FullMethodName = "/inkMe.studio.StudioService/SetStaffPermissions"
	StudioService_GetStaffPermissions_FullMethodName = "/inkMe.studio.StudioService/GetStaffPermissions"
)

// StudioServiceClient is the client API for StudioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StudioService for managing tattoo studios and staff
type StudioServiceClient interface {
	// Creates a new studio with owner
	CreateStudio(ctx context.Context, in *CreateStudioRequest, opts ...grpc.CallOption) (*CreateStudioResponse, error)
	// For existing studio owners to edit their studio
	UpdateStudio(ctx context.Context, in *UpdateStudioRequest, opts ...grpc.CallOption) (*UpdateStudioResponse, error)
	// For managing staff/users within a studio
	AddStudioUser(ctx context.Context, in *AddStudioUserRequest, opts ...grpc.CallOption) (*AddStudioUserResponse, error)
	UpdateStudioUser(ctx context.Context, in *UpdateStudioUserRequest, opts ...grpc.CallOption) (*UpdateStudioUserResponse, error)
	RemoveStudioUser(ctx context.Context, in *RemoveStudioUserRequest, opts ...grpc.CallOption) (*RemoveStudioUserResponse, error)
	// For multi-studio scenarios
	ListStudios(ctx context.Context, in *ListStudiosRequest, opts ...grpc.CallOption) (*ListStudiosResponse, error)
	// Staff management
	AddStaffMember(ctx context.Context, in *AddStaffMemberRequest, opts ...grpc.CallOption) (*AddStaffMemberResponse, error)
	UpdateStaffMember(ctx context.Context, in *UpdateStaffMemberRequest, opts ...grpc.CallOption) (*UpdateStaffMemberResponse, error)
	RemoveStaffMember(ctx context.Context, in *RemoveStaffMemberRequest, opts ...grpc.CallOption) (*RemoveStaffMemberResponse, error)
	ListStaffMembers(ctx context.Context, in *ListStaffMembersRequest, opts ...grpc.CallOption) (*ListStaffMembersResponse, error)
	// Permissions and roles
	SetStaffPermissions(ctx context.Context, in *SetStaffPermissionsRequest, opts ...grpc.CallOption) (*SetStaffPermissionsResponse, error)
	GetStaffPermissions(ctx context.Context, in *GetStaffPermissionsRequest, opts ...grpc.CallOption) (*GetStaffPermissionsResponse, error)
}

type studioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudioServiceClient(cc grpc.ClientConnInterface) StudioServiceClient {
	return &studioServiceClient{cc}
}

func (c *studioServiceClient) CreateStudio(ctx context.Context, in *CreateStudioRequest, opts ...grpc.CallOption) (*CreateStudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudioResponse)
	err := c.cc.Invoke(ctx, StudioService_CreateStudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) UpdateStudio(ctx context.Context, in *UpdateStudioRequest, opts ...grpc.CallOption) (*UpdateStudioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudioResponse)
	err := c.cc.Invoke(ctx, StudioService_UpdateStudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) AddStudioUser(ctx context.Context, in *AddStudioUserRequest, opts ...grpc.CallOption) (*AddStudioUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStudioUserResponse)
	err := c.cc.Invoke(ctx, StudioService_AddStudioUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) UpdateStudioUser(ctx context.Context, in *UpdateStudioUserRequest, opts ...grpc.CallOption) (*UpdateStudioUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudioUserResponse)
	err := c.cc.Invoke(ctx, StudioService_UpdateStudioUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) RemoveStudioUser(ctx context.Context, in *RemoveStudioUserRequest, opts ...grpc.CallOption) (*RemoveStudioUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStudioUserResponse)
	err := c.cc.Invoke(ctx, StudioService_RemoveStudioUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) ListStudios(ctx context.Context, in *ListStudiosRequest, opts ...grpc.CallOption) (*ListStudiosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStudiosResponse)
	err := c.cc.Invoke(ctx, StudioService_ListStudios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) AddStaffMember(ctx context.Context, in *AddStaffMemberRequest, opts ...grpc.CallOption) (*AddStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_AddStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) UpdateStaffMember(ctx context.Context, in *UpdateStaffMemberRequest, opts ...grpc.CallOption) (*UpdateStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_UpdateStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) RemoveStaffMember(ctx context.Context, in *RemoveStaffMemberRequest, opts ...grpc.CallOption) (*RemoveStaffMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStaffMemberResponse)
	err := c.cc.Invoke(ctx, StudioService_RemoveStaffMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) ListStaffMembers(ctx context.Context, in *ListStaffMembersRequest, opts ...grpc.CallOption) (*ListStaffMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffMembersResponse)
	err := c.cc.Invoke(ctx, StudioService_ListStaffMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) SetStaffPermissions(ctx context.Context, in *SetStaffPermissionsRequest, opts ...grpc.CallOption) (*SetStaffPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStaffPermissionsResponse)
	err := c.cc.Invoke(ctx, StudioService_SetStaffPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioServiceClient) GetStaffPermissions(ctx context.Context, in *GetStaffPermissionsRequest, opts ...grpc.CallOption) (*GetStaffPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffPermissionsResponse)
	err := c.cc.Invoke(ctx, StudioService_GetStaffPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudioServiceServer is the server API for StudioService service.
// All implementations must embed UnimplementedStudioServiceServer
// for forward compatibility.
//
// StudioService for managing tattoo studios and staff
type StudioServiceServer interface {
	// Creates a new studio with owner
	CreateStudio(context.Context, *CreateStudioRequest) (*CreateStudioResponse, error)
	// For existing studio owners to edit their studio
	UpdateStudio(context.Context, *UpdateStudioRequest) (*UpdateStudioResponse, error)
	// For managing staff/users within a studio
	AddStudioUser(context.Context, *AddStudioUserRequest) (*AddStudioUserResponse, error)
	UpdateStudioUser(context.Context, *UpdateStudioUserRequest) (*UpdateStudioUserResponse, error)
	RemoveStudioUser(context.Context, *RemoveStudioUserRequest) (*RemoveStudioUserResponse, error)
	// For multi-studio scenarios
	ListStudios(context.Context, *ListStudiosRequest) (*ListStudiosResponse, error)
	// Staff management
	AddStaffMember(context.Context, *AddStaffMemberRequest) (*AddStaffMemberResponse, error)
	UpdateStaffMember(context.Context, *UpdateStaffMemberRequest) (*UpdateStaffMemberResponse, error)
	RemoveStaffMember(context.Context, *RemoveStaffMemberRequest) (*RemoveStaffMemberResponse, error)
	ListStaffMembers(context.Context, *ListStaffMembersRequest) (*ListStaffMembersResponse, error)
	// Permissions and roles
	SetStaffPermissions(context.Context, *SetStaffPermissionsRequest) (*SetStaffPermissionsResponse, error)
	GetStaffPermissions(context.Context, *GetStaffPermissionsRequest) (*GetStaffPermissionsResponse, error)
	mustEmbedUnimplementedStudioServiceServer()
}

// UnimplementedStudioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudioServiceServer struct{}

func (UnimplementedStudioServiceServer) CreateStudio(context.Context, *CreateStudioRequest) (*CreateStudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudio not implemented")
}
func (UnimplementedStudioServiceServer) UpdateStudio(context.Context, *UpdateStudioRequest) (*UpdateStudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudio not implemented")
}
func (UnimplementedStudioServiceServer) AddStudioUser(context.Context, *AddStudioUserRequest) (*AddStudioUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudioUser not implemented")
}
func (UnimplementedStudioServiceServer) UpdateStudioUser(context.Context, *UpdateStudioUserRequest) (*UpdateStudioUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudioUser not implemented")
}
func (UnimplementedStudioServiceServer) RemoveStudioUser(context.Context, *RemoveStudioUserRequest) (*RemoveStudioUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudioUser not implemented")
}
func (UnimplementedStudioServiceServer) ListStudios(context.Context, *ListStudiosRequest) (*ListStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudios not implemented")
}
func (UnimplementedStudioServiceServer) AddStaffMember(context.Context, *AddStaffMemberRequest) (*AddStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) UpdateStaffMember(context.Context, *UpdateStaffMemberRequest) (*UpdateStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) RemoveStaffMember(context.Context, *RemoveStaffMemberRequest) (*RemoveStaffMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffMember not implemented")
}
func (UnimplementedStudioServiceServer) ListStaffMembers(context.Context, *ListStaffMembersRequest) (*ListStaffMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffMembers not implemented")
}
func (UnimplementedStudioServiceServer) SetStaffPermissions(context.Context, *SetStaffPermissionsRequest) (*SetStaffPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStaffPermissions not implemented")
}
func (UnimplementedStudioServiceServer) GetStaffPermissions(context.Context, *GetStaffPermissionsRequest) (*GetStaffPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffPermissions not implemented")
}
func (UnimplementedStudioServiceServer) mustEmbedUnimplementedStudioServiceServer() {}
func (UnimplementedStudioServiceServer) testEmbeddedByValue()                       {}

// UnsafeStudioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudioServiceServer will
// result in compilation errors.
type UnsafeStudioServiceServer interface {
	mustEmbedUnimplementedStudioServiceServer()
}

func RegisterStudioServiceServer(s grpc.ServiceRegistrar, srv StudioServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudioService_ServiceDesc, srv)
}

func _StudioService_CreateStudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).CreateStudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_CreateStudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).CreateStudio(ctx, req.(*CreateStudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_UpdateStudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).UpdateStudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_UpdateStudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).UpdateStudio(ctx, req.(*UpdateStudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_AddStudioUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudioUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).AddStudioUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_AddStudioUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).AddStudioUser(ctx, req.(*AddStudioUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_UpdateStudioUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudioUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).UpdateStudioUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_UpdateStudioUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).UpdateStudioUser(ctx, req.(*UpdateStudioUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_RemoveStudioUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStudioUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).RemoveStudioUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_RemoveStudioUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).RemoveStudioUser(ctx, req.(*RemoveStudioUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_ListStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).ListStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_ListStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).ListStudios(ctx, req.(*ListStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_AddStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).AddStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_AddStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).AddStaffMember(ctx, req.(*AddStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_UpdateStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).UpdateStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_UpdateStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).UpdateStaffMember(ctx, req.(*UpdateStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_RemoveStaffMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaffMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).RemoveStaffMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_RemoveStaffMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).RemoveStaffMember(ctx, req.(*RemoveStaffMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_ListStaffMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).ListStaffMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_ListStaffMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).ListStaffMembers(ctx, req.(*ListStaffMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_SetStaffPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStaffPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).SetStaffPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_SetStaffPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).SetStaffPermissions(ctx, req.(*SetStaffPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioService_GetStaffPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioServiceServer).GetStaffPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioService_GetStaffPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioServiceServer).GetStaffPermissions(ctx, req.(*GetStaffPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudioService_ServiceDesc is the grpc.ServiceDesc for StudioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inkMe.studio.StudioService",
	HandlerType: (*StudioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudio",
			Handler:    _StudioService_CreateStudio_Handler,
		},
		{
			MethodName: "UpdateStudio",
			Handler:    _StudioService_UpdateStudio_Handler,
		},
		{
			MethodName: "AddStudioUser",
			Handler:    _StudioService_AddStudioUser_Handler,
		},
		{
			MethodName: "UpdateStudioUser",
			Handler:    _StudioService_UpdateStudioUser_Handler,
		},
		{
			MethodName: "RemoveStudioUser",
			Handler:    _StudioService_RemoveStudioUser_Handler,
		},
		{
			MethodName: "ListStudios",
			Handler:    _StudioService_ListStudios_Handler,
		},
		{
			MethodName: "AddStaffMember",
			Handler:    _StudioService_AddStaffMember_Handler,
		},
		{
			MethodName: "UpdateStaffMember",
			Handler:    _StudioService_UpdateStaffMember_Handler,
		},
		{
			MethodName: "RemoveStaffMember",
			Handler:    _StudioService_RemoveStaffMember_Handler,
		},
		{
			MethodName: "ListStaffMembers",
			Handler:    _StudioService_ListStaffMembers_Handler,
		},
		{
			MethodName: "SetStaffPermissions",
			Handler:    _StudioService_SetStaffPermissions_Handler,
		},
		{
			MethodName: "GetStaffPermissions",
			Handler:    _StudioService_GetStaffPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studio.proto",
}

const (
	StudioAuth_Register_FullMethodName          = "/inkMe.studio.StudioAuth/Register"
	StudioAuth_Login_FullMethodName             = "/inkMe.studio.StudioAuth/Login"
	StudioAuth_Logout_FullMethodName            = "/inkMe.studio.StudioAuth/Logout"
	StudioAuth_ChangePassword_FullMethodName    = "/inkMe.studio.StudioAuth/ChangePassword"
	StudioAuth_ChangeEmail_FullMethodName       = "/inkMe.studio.StudioAuth/ChangeEmail"
	StudioAuth_RefreshToken_FullMethodName      = "/inkMe.studio.StudioAuth/RefreshToken"
	StudioAuth_ValidateSession_FullMethodName   = "/inkMe.studio.StudioAuth/ValidateSession"
	StudioAuth_GetAllUsers_FullMethodName       = "/inkMe.studio.StudioAuth/GetAllUsers"
	StudioAuth_GetUserByID_FullMethodName       = "/inkMe.studio.StudioAuth/GetUserByID"
	StudioAuth_DeleteUser_FullMethodName        = "/inkMe.studio.StudioAuth/DeleteUser"
	StudioAuth_UpdateUser_FullMethodName        = "/inkMe.studio.StudioAuth/UpdateUser"
	StudioAuth_InsertUser_FullMethodName        = "/inkMe.studio.StudioAuth/InsertUser"
	StudioAuth_GetUserByEmail_FullMethodName    = "/inkMe.studio.StudioAuth/GetUserByEmail"
	StudioAuth_GetUserByUsername_FullMethodName = "/inkMe.studio.StudioAuth/GetUserByUsername"
)

// StudioAuthClient is the client API for StudioAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudioAuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	// New user-related services
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error)
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error)
}

type studioAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewStudioAuthClient(cc grpc.ClientConnInterface) StudioAuthClient {
	return &studioAuthClient{cc}
}

func (c *studioAuthClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, StudioAuth_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, StudioAuth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, StudioAuth_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, StudioAuth_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEmailResponse)
	err := c.cc.Invoke(ctx, StudioAuth_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, StudioAuth_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, StudioAuth_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, StudioAuth_GetAllUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIDResponse)
	err := c.cc.Invoke(ctx, StudioAuth_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, StudioAuth_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, StudioAuth_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) InsertUser(ctx context.Context, in *InsertUserRequest, opts ...grpc.CallOption) (*InsertUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertUserResponse)
	err := c.cc.Invoke(ctx, StudioAuth_InsertUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailRequest, opts ...grpc.CallOption) (*GetUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByEmailResponse)
	err := c.cc.Invoke(ctx, StudioAuth_GetUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studioAuthClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByUsernameResponse)
	err := c.cc.Invoke(ctx, StudioAuth_GetUserByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudioAuthServer is the server API for StudioAuth service.
// All implementations must embed UnimplementedStudioAuthServer
// for forward compatibility.
type StudioAuthServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error)
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	// New user-related services
	GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	InsertUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error)
	GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error)
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error)
	mustEmbedUnimplementedStudioAuthServer()
}

// UnimplementedStudioAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudioAuthServer struct{}

func (UnimplementedStudioAuthServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStudioAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStudioAuthServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedStudioAuthServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedStudioAuthServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedStudioAuthServer) RefreshToken(context.Context, *RefreshTokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedStudioAuthServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedStudioAuthServer) GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedStudioAuthServer) GetUserByID(context.Context, *GetUserByIDRequest) (*GetUserByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedStudioAuthServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedStudioAuthServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedStudioAuthServer) InsertUser(context.Context, *InsertUserRequest) (*InsertUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
func (UnimplementedStudioAuthServer) GetUserByEmail(context.Context, *GetUserByEmailRequest) (*GetUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedStudioAuthServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedStudioAuthServer) mustEmbedUnimplementedStudioAuthServer() {}
func (UnimplementedStudioAuthServer) testEmbeddedByValue()                    {}

// UnsafeStudioAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudioAuthServer will
// result in compilation errors.
type UnsafeStudioAuthServer interface {
	mustEmbedUnimplementedStudioAuthServer()
}

func RegisterStudioAuthServer(s grpc.ServiceRegistrar, srv StudioAuthServer) {
	// If the following call pancis, it indicates UnimplementedStudioAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudioAuth_ServiceDesc, srv)
}

func _StudioAuth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).GetAllUsers(ctx, req.(*GetAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_InsertUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).InsertUser(ctx, req.(*InsertUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_GetUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).GetUserByEmail(ctx, req.(*GetUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudioAuth_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudioAuthServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudioAuth_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudioAuthServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudioAuth_ServiceDesc is the grpc.ServiceDesc for StudioAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudioAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inkMe.studio.StudioAuth",
	HandlerType: (*StudioAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StudioAuth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StudioAuth_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _StudioAuth_Logout_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _StudioAuth_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _StudioAuth_ChangeEmail_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _StudioAuth_RefreshToken_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _StudioAuth_ValidateSession_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _StudioAuth_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _StudioAuth_GetUserByID_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _StudioAuth_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _StudioAuth_UpdateUser_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _StudioAuth_InsertUser_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _StudioAuth_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _StudioAuth_GetUserByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "studio.proto",
}
