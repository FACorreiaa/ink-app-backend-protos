// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: conversation.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status_Code int32

const (
	Status_UNSPECIFIED Status_Code = 0
	Status_OK          Status_Code = 1
	Status_ERROR       Status_Code = 2
)

// Enum value maps for Status_Code.
var (
	Status_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OK",
		2: "ERROR",
	}
	Status_Code_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OK":          1,
		"ERROR":       2,
	}
)

func (x Status_Code) Enum() *Status_Code {
	p := new(Status_Code)
	*p = x
	return p
}

func (x Status_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[0].Descriptor()
}

func (Status_Code) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[0]
}

func (x Status_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_Code.Descriptor instead.
func (Status_Code) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0, 0}
}

type Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          Status_Code            `protobuf:"varint,1,opt,name=code,proto3,enum=inkMe.conversation.Status_Code" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Status) Reset() {
	*x = Status{}
	mi := &file_conversation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetCode() Status_Code {
	if x != nil {
		return x.Code
	}
	return Status_UNSPECIFIED
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request to create a new conversation
type CreateConversationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudioId      string                 `protobuf:"bytes,2,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	ArtistId      string                 `protobuf:"bytes,3,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"` // The tattoo artist
	ClientId      string                 `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // The client
	Subject       string                 `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`                   // Optional subject for the conversation
	Request       *BaseRequest           `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationRequest) Reset() {
	*x = CreateConversationRequest{}
	mi := &file_conversation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationRequest) ProtoMessage() {}

func (x *CreateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateConversationRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *CreateConversationRequest) GetStudioId() string {
	if x != nil {
		return x.StudioId
	}
	return ""
}

func (x *CreateConversationRequest) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *CreateConversationRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CreateConversationRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateConversationRequest) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateConversationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *Conversation          `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Response      *BaseResponse          `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationResponse) Reset() {
	*x = CreateConversationResponse{}
	mi := &file_conversation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationResponse) ProtoMessage() {}

func (x *CreateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationResponse.ProtoReflect.Descriptor instead.
func (*CreateConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *CreateConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *CreateConversationResponse) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Request to list conversations
type ListConversationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       *BaseRequest           `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
	StudioId      string                 `protobuf:"bytes,2,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	ArtistId      *string                `protobuf:"bytes,3,opt,name=artist_id,json=artistId,proto3,oneof" json:"artist_id,omitempty"`        // Filter by artist
	ClientId      *string                `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3,oneof" json:"client_id,omitempty"`        // Filter by client
	UnreadOnly    *bool                  `protobuf:"varint,5,opt,name=unread_only,json=unreadOnly,proto3,oneof" json:"unread_only,omitempty"` // Filter for unread messages only
	Archived      *bool                  `protobuf:"varint,6,opt,name=archived,proto3,oneof" json:"archived,omitempty"`                       // Include archived conversations
	Page          int32                  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`                                     // For pagination
	PageSize      int32                  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`             // For pagination
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsRequest) Reset() {
	*x = ListConversationsRequest{}
	mi := &file_conversation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRequest) ProtoMessage() {}

func (x *ListConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ListConversationsRequest) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListConversationsRequest) GetStudioId() string {
	if x != nil {
		return x.StudioId
	}
	return ""
}

func (x *ListConversationsRequest) GetArtistId() string {
	if x != nil && x.ArtistId != nil {
		return *x.ArtistId
	}
	return ""
}

func (x *ListConversationsRequest) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *ListConversationsRequest) GetUnreadOnly() bool {
	if x != nil && x.UnreadOnly != nil {
		return *x.UnreadOnly
	}
	return false
}

func (x *ListConversationsRequest) GetArchived() bool {
	if x != nil && x.Archived != nil {
		return *x.Archived
	}
	return false
}

func (x *ListConversationsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConversationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListConversationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      *BaseResponse          `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
	Conversations []*Conversation        `protobuf:"bytes,2,rep,name=conversations,proto3" json:"conversations,omitempty"`
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // Total number of conversations matching filters
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsResponse) Reset() {
	*x = ListConversationsResponse{}
	mi := &file_conversation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsResponse) ProtoMessage() {}

func (x *ListConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsResponse.ProtoReflect.Descriptor instead.
func (*ListConversationsResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *ListConversationsResponse) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListConversationsResponse) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *ListConversationsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// Request to get a specific conversation
type GetConversationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConversationId  string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MessageLimit    *int32                 `protobuf:"varint,3,opt,name=message_limit,json=messageLimit,proto3,oneof" json:"message_limit,omitempty"`          // Limit number of messages returned
	BeforeTimestamp *int64                 `protobuf:"varint,4,opt,name=before_timestamp,json=beforeTimestamp,proto3,oneof" json:"before_timestamp,omitempty"` // Get messages before this timestamp
	Request         *BaseRequest           `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetConversationRequest) Reset() {
	*x = GetConversationRequest{}
	mi := &file_conversation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationRequest) ProtoMessage() {}

func (x *GetConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationRequest.ProtoReflect.Descriptor instead.
func (*GetConversationRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *GetConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetConversationRequest) GetMessageLimit() int32 {
	if x != nil && x.MessageLimit != nil {
		return *x.MessageLimit
	}
	return 0
}

func (x *GetConversationRequest) GetBeforeTimestamp() int64 {
	if x != nil && x.BeforeTimestamp != nil {
		return *x.BeforeTimestamp
	}
	return 0
}

func (x *GetConversationRequest) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type GetConversationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *Conversation          `protobuf:"bytes,2,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Messages      []*Message             `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	Response      *BaseResponse          `protobuf:"bytes,100,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationResponse) Reset() {
	*x = GetConversationResponse{}
	mi := &file_conversation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationResponse) ProtoMessage() {}

func (x *GetConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationResponse.ProtoReflect.Descriptor instead.
func (*GetConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *GetConversationResponse) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetConversationResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetConversationResponse) GetResponse() *BaseResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Request to send a message
type SendMessageRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Base           *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ConversationId string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	SenderId       string                 `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"` // Either artist_id or client_id
	Content        string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                   // Text content
	Attachments    []*Attachment          `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"`           // Optional attachments
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_conversation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *SendMessageRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SendMessageRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *SendMessageRequest) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SendMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageRequest) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type SendMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseResponse          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Message       *Message               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_conversation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *SendMessageResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *SendMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Request to mark messages as read
type MarkAsReadRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Base           *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ConversationId string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId         string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // The user marking messages as read
	ReadUpTo       int64                  `protobuf:"varint,4,opt,name=read_up_to,json=readUpTo,proto3" json:"read_up_to,omitempty"` // Timestamp up to which messages are read
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MarkAsReadRequest) Reset() {
	*x = MarkAsReadRequest{}
	mi := &file_conversation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadRequest) ProtoMessage() {}

func (x *MarkAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkAsReadRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *MarkAsReadRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *MarkAsReadRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *MarkAsReadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MarkAsReadRequest) GetReadUpTo() int64 {
	if x != nil {
		return x.ReadUpTo
	}
	return 0
}

type MarkAsReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseResponse          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkAsReadResponse) Reset() {
	*x = MarkAsReadResponse{}
	mi := &file_conversation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadResponse) ProtoMessage() {}

func (x *MarkAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkAsReadResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *MarkAsReadResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

// Request to archive a conversation
type ArchiveConversationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Base           *BaseRequest           `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ConversationId string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId         string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // User performing the archive operation
	Archive        bool                   `protobuf:"varint,4,opt,name=archive,proto3" json:"archive,omitempty"`            // True to archive, false to unarchive
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ArchiveConversationRequest) Reset() {
	*x = ArchiveConversationRequest{}
	mi := &file_conversation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveConversationRequest) ProtoMessage() {}

func (x *ArchiveConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveConversationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveConversationRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *ArchiveConversationRequest) GetBase() *BaseRequest {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ArchiveConversationRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ArchiveConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ArchiveConversationRequest) GetArchive() bool {
	if x != nil {
		return x.Archive
	}
	return false
}

type ArchiveConversationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          *BaseResponse          `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveConversationResponse) Reset() {
	*x = ArchiveConversationResponse{}
	mi := &file_conversation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveConversationResponse) ProtoMessage() {}

func (x *ArchiveConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveConversationResponse.ProtoReflect.Descriptor instead.
func (*ArchiveConversationResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *ArchiveConversationResponse) GetBase() *BaseResponse {
	if x != nil {
		return x.Base
	}
	return nil
}

// Conversation entity
type Conversation struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StudioId   string                 `protobuf:"bytes,2,opt,name=studio_id,json=studioId,proto3" json:"studio_id,omitempty"`
	ArtistId   string                 `protobuf:"bytes,3,opt,name=artist_id,json=artistId,proto3" json:"artist_id,omitempty"`
	ClientId   string                 `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Subject    string                 `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`     // Timestamp when the conversation was created
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`     // Timestamp of the last message
	IsArchived bool                   `protobuf:"varint,8,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"` // Whether the conversation is archived
	// Counts for unread messages
	ArtistUnreadCount int32 `protobuf:"varint,9,opt,name=artist_unread_count,json=artistUnreadCount,proto3" json:"artist_unread_count,omitempty"`  // Unread messages for the artist
	ClientUnreadCount int32 `protobuf:"varint,10,opt,name=client_unread_count,json=clientUnreadCount,proto3" json:"client_unread_count,omitempty"` // Unread messages for the client
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_conversation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *Conversation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Conversation) GetStudioId() string {
	if x != nil {
		return x.StudioId
	}
	return ""
}

func (x *Conversation) GetArtistId() string {
	if x != nil {
		return x.ArtistId
	}
	return ""
}

func (x *Conversation) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Conversation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Conversation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conversation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Conversation) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *Conversation) GetArtistUnreadCount() int32 {
	if x != nil {
		return x.ArtistUnreadCount
	}
	return 0
}

func (x *Conversation) GetClientUnreadCount() int32 {
	if x != nil {
		return x.ClientUnreadCount
	}
	return 0
}

// Message entity
type Message struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConversationId string                 `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	SenderId       string                 `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"` // ID of the sender (artist or client)
	Content        string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                   // Text content
	SentAt         int64                  `protobuf:"varint,5,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`      // Timestamp when the message was sent
	IsRead         bool                   `protobuf:"varint,6,opt,name=is_read,json=isRead,proto3" json:"is_read,omitempty"`      // Whether the message has been read by the recipient
	Attachments    []*Attachment          `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`           // Optional attachments
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_conversation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *Message) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetSentAt() int64 {
	if x != nil {
		return x.SentAt
	}
	return 0
}

func (x *Message) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Message) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// Attachment entity for messages
type Attachment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`                         // e.g., "image", "document", "tattoo_design"
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                           // URL to the attachment
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                         // Original filename
	Size          int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                        // Size in bytes
	MimeType      string                 `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"` // MIME type
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	mi := &file_conversation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *Attachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Attachment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Attachment) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type BaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Downstream    string                 `protobuf:"bytes,998,opt,name=downstream,proto3" json:"downstream,omitempty"`
	RequestId     string                 `protobuf:"bytes,999,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TraceId       string                 `protobuf:"bytes,1000,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	mi := &file_conversation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{16}
}

func (x *BaseRequest) GetDownstream() string {
	if x != nil {
		return x.Downstream
	}
	return ""
}

func (x *BaseRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *BaseRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type BaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,997,opt,name=success,proto3" json:"success,omitempty"`
	Upstream      string                 `protobuf:"bytes,998,opt,name=upstream,proto3" json:"upstream,omitempty"`
	RequestId     string                 `protobuf:"bytes,999,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status        string                 `protobuf:"bytes,1000,opt,name=status,proto3" json:"status,omitempty"`
	TraceId       string                 `protobuf:"bytes,9999,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	mi := &file_conversation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{17}
}

func (x *BaseResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BaseResponse) GetUpstream() string {
	if x != nil {
		return x.Upstream
	}
	return ""
}

func (x *BaseResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *BaseResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BaseResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

var File_conversation_proto protoreflect.FileDescriptor

const file_conversation_proto_rawDesc = "" +
	"\n" +
	"\x12conversation.proto\x12\x12inkMe.conversation\x1a\x1fgoogle/protobuf/timestamp.proto\"\x83\x01\n" +
	"\x06Status\x123\n" +
	"\x04code\x18\x01 \x01(\x0e2\x1f.inkMe.conversation.Status.CodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"*\n" +
	"\x04Code\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\x06\n" +
	"\x02OK\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\"\xc7\x01\n" +
	"\x19CreateConversationRequest\x12\x1b\n" +
	"\tstudio_id\x18\x02 \x01(\tR\bstudioId\x12\x1b\n" +
	"\tartist_id\x18\x03 \x01(\tR\bartistId\x12\x1b\n" +
	"\tclient_id\x18\x04 \x01(\tR\bclientId\x12\x18\n" +
	"\asubject\x18\x05 \x01(\tR\asubject\x129\n" +
	"\arequest\x18d \x01(\v2\x1f.inkMe.conversation.BaseRequestR\arequest\"\xa0\x01\n" +
	"\x1aCreateConversationResponse\x12D\n" +
	"\fconversation\x18\x02 \x01(\v2 .inkMe.conversation.ConversationR\fconversation\x12<\n" +
	"\bresponse\x18\x01 \x01(\v2 .inkMe.conversation.BaseResponseR\bresponse\"\xe7\x02\n" +
	"\x18ListConversationsRequest\x129\n" +
	"\arequest\x18d \x01(\v2\x1f.inkMe.conversation.BaseRequestR\arequest\x12\x1b\n" +
	"\tstudio_id\x18\x02 \x01(\tR\bstudioId\x12 \n" +
	"\tartist_id\x18\x03 \x01(\tH\x00R\bartistId\x88\x01\x01\x12 \n" +
	"\tclient_id\x18\x04 \x01(\tH\x01R\bclientId\x88\x01\x01\x12$\n" +
	"\vunread_only\x18\x05 \x01(\bH\x02R\n" +
	"unreadOnly\x88\x01\x01\x12\x1f\n" +
	"\barchived\x18\x06 \x01(\bH\x03R\barchived\x88\x01\x01\x12\x12\n" +
	"\x04page\x18\a \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\b \x01(\x05R\bpageSizeB\f\n" +
	"\n" +
	"_artist_idB\f\n" +
	"\n" +
	"_client_idB\x0e\n" +
	"\f_unread_onlyB\v\n" +
	"\t_archived\"\xc2\x01\n" +
	"\x19ListConversationsResponse\x12<\n" +
	"\bresponse\x18d \x01(\v2 .inkMe.conversation.BaseResponseR\bresponse\x12F\n" +
	"\rconversations\x18\x02 \x03(\v2 .inkMe.conversation.ConversationR\rconversations\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\"\xfd\x01\n" +
	"\x16GetConversationRequest\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12(\n" +
	"\rmessage_limit\x18\x03 \x01(\x05H\x00R\fmessageLimit\x88\x01\x01\x12.\n" +
	"\x10before_timestamp\x18\x04 \x01(\x03H\x01R\x0fbeforeTimestamp\x88\x01\x01\x129\n" +
	"\arequest\x18d \x01(\v2\x1f.inkMe.conversation.BaseRequestR\arequestB\x10\n" +
	"\x0e_message_limitB\x13\n" +
	"\x11_before_timestamp\"\xd6\x01\n" +
	"\x17GetConversationResponse\x12D\n" +
	"\fconversation\x18\x02 \x01(\v2 .inkMe.conversation.ConversationR\fconversation\x127\n" +
	"\bmessages\x18\x03 \x03(\v2\x1b.inkMe.conversation.MessageR\bmessages\x12<\n" +
	"\bresponse\x18d \x01(\v2 .inkMe.conversation.BaseResponseR\bresponse\"\xeb\x01\n" +
	"\x12SendMessageRequest\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x1f.inkMe.conversation.BaseRequestR\x04base\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x1b\n" +
	"\tsender_id\x18\x03 \x01(\tR\bsenderId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12@\n" +
	"\vattachments\x18\x05 \x03(\v2\x1e.inkMe.conversation.AttachmentR\vattachments\"\x82\x01\n" +
	"\x13SendMessageResponse\x124\n" +
	"\x04base\x18\x01 \x01(\v2 .inkMe.conversation.BaseResponseR\x04base\x125\n" +
	"\amessage\x18\x02 \x01(\v2\x1b.inkMe.conversation.MessageR\amessage\"\xa8\x01\n" +
	"\x11MarkAsReadRequest\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x1f.inkMe.conversation.BaseRequestR\x04base\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x1c\n" +
	"\n" +
	"read_up_to\x18\x04 \x01(\x03R\breadUpTo\"J\n" +
	"\x12MarkAsReadResponse\x124\n" +
	"\x04base\x18\x01 \x01(\v2 .inkMe.conversation.BaseResponseR\x04base\"\xad\x01\n" +
	"\x1aArchiveConversationRequest\x123\n" +
	"\x04base\x18\x01 \x01(\v2\x1f.inkMe.conversation.BaseRequestR\x04base\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\aarchive\x18\x04 \x01(\bR\aarchive\"S\n" +
	"\x1bArchiveConversationResponse\x124\n" +
	"\x04base\x18\x01 \x01(\v2 .inkMe.conversation.BaseResponseR\x04base\"\x86\x03\n" +
	"\fConversation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tstudio_id\x18\x02 \x01(\tR\bstudioId\x12\x1b\n" +
	"\tartist_id\x18\x03 \x01(\tR\bartistId\x12\x1b\n" +
	"\tclient_id\x18\x04 \x01(\tR\bclientId\x12\x18\n" +
	"\asubject\x18\x05 \x01(\tR\asubject\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1f\n" +
	"\vis_archived\x18\b \x01(\bR\n" +
	"isArchived\x12.\n" +
	"\x13artist_unread_count\x18\t \x01(\x05R\x11artistUnreadCount\x12.\n" +
	"\x13client_unread_count\x18\n" +
	" \x01(\x05R\x11clientUnreadCount\"\xed\x01\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\tR\x0econversationId\x12\x1b\n" +
	"\tsender_id\x18\x03 \x01(\tR\bsenderId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x17\n" +
	"\asent_at\x18\x05 \x01(\x03R\x06sentAt\x12\x17\n" +
	"\ais_read\x18\x06 \x01(\bR\x06isRead\x12@\n" +
	"\vattachments\x18\a \x03(\v2\x1e.inkMe.conversation.AttachmentR\vattachments\"\x87\x01\n" +
	"\n" +
	"Attachment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x03R\x04size\x12\x1b\n" +
	"\tmime_type\x18\x06 \x01(\tR\bmimeType\"j\n" +
	"\vBaseRequest\x12\x1f\n" +
	"\n" +
	"downstream\x18\xe6\a \x01(\tR\n" +
	"downstream\x12\x1e\n" +
	"\n" +
	"request_id\x18\xe7\a \x01(\tR\trequestId\x12\x1a\n" +
	"\btrace_id\x18\xe8\a \x01(\tR\atraceId\"\x9b\x01\n" +
	"\fBaseResponse\x12\x19\n" +
	"\asuccess\x18\xe5\a \x01(\bR\asuccess\x12\x1b\n" +
	"\bupstream\x18\xe6\a \x01(\tR\bupstream\x12\x1e\n" +
	"\n" +
	"request_id\x18\xe7\a \x01(\tR\trequestId\x12\x17\n" +
	"\x06status\x18\xe8\a \x01(\tR\x06status\x12\x1a\n" +
	"\btrace_id\x18\x8fN \x01(\tR\atraceId2\x9d\x05\n" +
	"\x13ConversationService\x12s\n" +
	"\x12CreateConversation\x12-.inkMe.conversation.CreateConversationRequest\x1a..inkMe.conversation.CreateConversationResponse\x12p\n" +
	"\x11ListConversations\x12,.inkMe.conversation.ListConversationsRequest\x1a-.inkMe.conversation.ListConversationsResponse\x12j\n" +
	"\x0fGetConversation\x12*.inkMe.conversation.GetConversationRequest\x1a+.inkMe.conversation.GetConversationResponse\x12^\n" +
	"\vSendMessage\x12&.inkMe.conversation.SendMessageRequest\x1a'.inkMe.conversation.SendMessageResponse\x12[\n" +
	"\n" +
	"MarkAsRead\x12%.inkMe.conversation.MarkAsReadRequest\x1a&.inkMe.conversation.MarkAsReadResponse\x12v\n" +
	"\x13ArchiveConversation\x12..inkMe.conversation.ArchiveConversationRequest\x1a/.inkMe.conversation.ArchiveConversationResponseBMZKgithub.com/FACorreiaa/ink-app-backend-protos/modules/conversation/generatedb\x06proto3"

var (
	file_conversation_proto_rawDescOnce sync.Once
	file_conversation_proto_rawDescData []byte
)

func file_conversation_proto_rawDescGZIP() []byte {
	file_conversation_proto_rawDescOnce.Do(func() {
		file_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_conversation_proto_rawDesc), len(file_conversation_proto_rawDesc)))
	})
	return file_conversation_proto_rawDescData
}

var file_conversation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_conversation_proto_goTypes = []any{
	(Status_Code)(0),                    // 0: inkMe.conversation.Status.Code
	(*Status)(nil),                      // 1: inkMe.conversation.Status
	(*CreateConversationRequest)(nil),   // 2: inkMe.conversation.CreateConversationRequest
	(*CreateConversationResponse)(nil),  // 3: inkMe.conversation.CreateConversationResponse
	(*ListConversationsRequest)(nil),    // 4: inkMe.conversation.ListConversationsRequest
	(*ListConversationsResponse)(nil),   // 5: inkMe.conversation.ListConversationsResponse
	(*GetConversationRequest)(nil),      // 6: inkMe.conversation.GetConversationRequest
	(*GetConversationResponse)(nil),     // 7: inkMe.conversation.GetConversationResponse
	(*SendMessageRequest)(nil),          // 8: inkMe.conversation.SendMessageRequest
	(*SendMessageResponse)(nil),         // 9: inkMe.conversation.SendMessageResponse
	(*MarkAsReadRequest)(nil),           // 10: inkMe.conversation.MarkAsReadRequest
	(*MarkAsReadResponse)(nil),          // 11: inkMe.conversation.MarkAsReadResponse
	(*ArchiveConversationRequest)(nil),  // 12: inkMe.conversation.ArchiveConversationRequest
	(*ArchiveConversationResponse)(nil), // 13: inkMe.conversation.ArchiveConversationResponse
	(*Conversation)(nil),                // 14: inkMe.conversation.Conversation
	(*Message)(nil),                     // 15: inkMe.conversation.Message
	(*Attachment)(nil),                  // 16: inkMe.conversation.Attachment
	(*BaseRequest)(nil),                 // 17: inkMe.conversation.BaseRequest
	(*BaseResponse)(nil),                // 18: inkMe.conversation.BaseResponse
	(*timestamppb.Timestamp)(nil),       // 19: google.protobuf.Timestamp
}
var file_conversation_proto_depIdxs = []int32{
	0,  // 0: inkMe.conversation.Status.code:type_name -> inkMe.conversation.Status.Code
	17, // 1: inkMe.conversation.CreateConversationRequest.request:type_name -> inkMe.conversation.BaseRequest
	14, // 2: inkMe.conversation.CreateConversationResponse.conversation:type_name -> inkMe.conversation.Conversation
	18, // 3: inkMe.conversation.CreateConversationResponse.response:type_name -> inkMe.conversation.BaseResponse
	17, // 4: inkMe.conversation.ListConversationsRequest.request:type_name -> inkMe.conversation.BaseRequest
	18, // 5: inkMe.conversation.ListConversationsResponse.response:type_name -> inkMe.conversation.BaseResponse
	14, // 6: inkMe.conversation.ListConversationsResponse.conversations:type_name -> inkMe.conversation.Conversation
	17, // 7: inkMe.conversation.GetConversationRequest.request:type_name -> inkMe.conversation.BaseRequest
	14, // 8: inkMe.conversation.GetConversationResponse.conversation:type_name -> inkMe.conversation.Conversation
	15, // 9: inkMe.conversation.GetConversationResponse.messages:type_name -> inkMe.conversation.Message
	18, // 10: inkMe.conversation.GetConversationResponse.response:type_name -> inkMe.conversation.BaseResponse
	17, // 11: inkMe.conversation.SendMessageRequest.base:type_name -> inkMe.conversation.BaseRequest
	16, // 12: inkMe.conversation.SendMessageRequest.attachments:type_name -> inkMe.conversation.Attachment
	18, // 13: inkMe.conversation.SendMessageResponse.base:type_name -> inkMe.conversation.BaseResponse
	15, // 14: inkMe.conversation.SendMessageResponse.message:type_name -> inkMe.conversation.Message
	17, // 15: inkMe.conversation.MarkAsReadRequest.base:type_name -> inkMe.conversation.BaseRequest
	18, // 16: inkMe.conversation.MarkAsReadResponse.base:type_name -> inkMe.conversation.BaseResponse
	17, // 17: inkMe.conversation.ArchiveConversationRequest.base:type_name -> inkMe.conversation.BaseRequest
	18, // 18: inkMe.conversation.ArchiveConversationResponse.base:type_name -> inkMe.conversation.BaseResponse
	19, // 19: inkMe.conversation.Conversation.created_at:type_name -> google.protobuf.Timestamp
	19, // 20: inkMe.conversation.Conversation.updated_at:type_name -> google.protobuf.Timestamp
	16, // 21: inkMe.conversation.Message.attachments:type_name -> inkMe.conversation.Attachment
	2,  // 22: inkMe.conversation.ConversationService.CreateConversation:input_type -> inkMe.conversation.CreateConversationRequest
	4,  // 23: inkMe.conversation.ConversationService.ListConversations:input_type -> inkMe.conversation.ListConversationsRequest
	6,  // 24: inkMe.conversation.ConversationService.GetConversation:input_type -> inkMe.conversation.GetConversationRequest
	8,  // 25: inkMe.conversation.ConversationService.SendMessage:input_type -> inkMe.conversation.SendMessageRequest
	10, // 26: inkMe.conversation.ConversationService.MarkAsRead:input_type -> inkMe.conversation.MarkAsReadRequest
	12, // 27: inkMe.conversation.ConversationService.ArchiveConversation:input_type -> inkMe.conversation.ArchiveConversationRequest
	3,  // 28: inkMe.conversation.ConversationService.CreateConversation:output_type -> inkMe.conversation.CreateConversationResponse
	5,  // 29: inkMe.conversation.ConversationService.ListConversations:output_type -> inkMe.conversation.ListConversationsResponse
	7,  // 30: inkMe.conversation.ConversationService.GetConversation:output_type -> inkMe.conversation.GetConversationResponse
	9,  // 31: inkMe.conversation.ConversationService.SendMessage:output_type -> inkMe.conversation.SendMessageResponse
	11, // 32: inkMe.conversation.ConversationService.MarkAsRead:output_type -> inkMe.conversation.MarkAsReadResponse
	13, // 33: inkMe.conversation.ConversationService.ArchiveConversation:output_type -> inkMe.conversation.ArchiveConversationResponse
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_conversation_proto_init() }
func file_conversation_proto_init() {
	if File_conversation_proto != nil {
		return
	}
	file_conversation_proto_msgTypes[3].OneofWrappers = []any{}
	file_conversation_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_conversation_proto_rawDesc), len(file_conversation_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_conversation_proto_goTypes,
		DependencyIndexes: file_conversation_proto_depIdxs,
		EnumInfos:         file_conversation_proto_enumTypes,
		MessageInfos:      file_conversation_proto_msgTypes,
	}.Build()
	File_conversation_proto = out.File
	file_conversation_proto_goTypes = nil
	file_conversation_proto_depIdxs = nil
}
